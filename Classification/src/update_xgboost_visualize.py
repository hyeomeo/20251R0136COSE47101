# -*- coding: utf-8 -*-
"""Update_XGBoost_visualize

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x5srqP93C9hZ-coGvQSTb-faV3y7OMBo
"""



import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from xgboost import XGBRegressor

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 데이터 불러오기
df = pd.read_csv("preprocessed_with_cluster_ALL.csv")

# REGION 제거
if "REGION" in df.columns:
    df = df.drop(columns=["REGION"])

# 주요 결측 제거
df = df.dropna(subset=[
    "DGSTFN", "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "MVMN_NM",
    "REVISIT_INTENTION", "RCMDTN_INTENTION", "RELATION_TYPE",
    "VISIT_AREA_TYPE_CD"
])

# 타겟과 피처 분리
X_reg = df.drop(columns=[
    "DGSTFN", "label", "TRAVELER_ID", "TRAVEL_ID",
    "REVISIT_INTENTION", "RCMDTN_INTENTION",
    "TRAVEL_START_YMD", "TRAVEL_END_YMD", "CLUSTER"
], errors="ignore")

y_reg = df["DGSTFN"]

freq_encode_cols = ["VISIT_AREA_NM", "VISIT_AREA_TYPE_CD"]
for col in freq_encode_cols:
    freq_map = X_reg[col].value_counts().to_dict()
    X_reg[col] = X_reg[col].map(freq_map)

onehot_features = [
    "MAIN_TRAVEL_MONTH", "TRAVEL_STATUS_ACCOMPANY",
    "RELATION_TYPE", "MVMN_NM", "GENDER", "AGE_GRP"
]

num_features = [
    "TRAVEL_STYL_1", "TRAVEL_STYL_3", "TRAVEL_STYL_5",
    "TRAVEL_STYL_6", "TRAVEL_STYL_7", "TRAVEL_STYL_8"
]

# ColumnTransformer 설정
preprocessor = ColumnTransformer([
    ("onehot", OneHotEncoder(handle_unknown="ignore"), onehot_features)
], remainder="passthrough")

# 전체 파이프라인 구성
reg_pipeline = Pipeline([
    ("preprocessor", preprocessor),
    ("regressor", XGBRegressor(
        objective="reg:squarederror",
        n_estimators=100,
        max_depth=5,
        learning_rate=0.1,
        random_state=42
    ))
])

# 학습/테스트 분할
X_train, X_test, y_train, y_test = train_test_split(
    X_reg, y_reg, test_size=0.3, random_state=42
)

# 학습 및 예측
reg_pipeline.fit(X_train, y_train)
y_pred_raw = reg_pipeline.predict(X_test)
y_pred = np.clip(np.round(y_pred_raw), 1, 5).astype(int)

# 평가 결과 출력
print("\n📊 XGBoost Regression (with TRAVEL_STYLE)")
print("✅ MAE:", round(mean_absolute_error(y_test, y_pred), 4))
print("✅ MSE:", round(mean_squared_error(y_test, y_pred), 4))
print("✅ R² :", round(r2_score(y_test, y_pred), 4))

# 정수화된 예측 정확도
print("📌 Rounded Accuracy:", accuracy_score(y_test, y_pred))
print("🧩 Confusion Matrix:\n", confusion_matrix(y_test, y_pred))



import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8, 5))
sns.histplot(y_test, bins=5, color="gray", label="Actual", alpha=0.4)
sns.histplot(y_pred_raw, bins=20, color="steelblue", label="Predicted", kde=True)
plt.title("Actual vs Predicted DGSTFN Distribution")
plt.xlabel("DGSTFN Score")
plt.ylabel("Frequency")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()