# -*- coding: utf-8 -*-
"""final_model_pipeline

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fcDByVpggBs3G7-hrdKZ3ElsLEWgZEik
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import Pipeline as ImbPipeline
import matplotlib.pyplot as plt
import seaborn as sns

# Îç∞Ïù¥ÌÑ∞ Î°úÎî©
df = pd.read_csv("preprocessed_with_cluster_ALL.csv")
df = df.drop(columns=["REGION"], errors="ignore")
df = df.dropna(subset=[
    "DGSTFN", "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "MVMN_NM",
    "REVISIT_INTENTION", "RCMDTN_INTENTION", "RELATION_TYPE",
    "VISIT_AREA_TYPE_CD"
])

# ÌÅ¥ÎûòÏä§ Ï†ïÏùò
def map_label(score):
    if score == 5:
        return 2
    elif score in [3, 4]:
        return 1
    else:
        return 0
df["label_3cls"] = df["DGSTFN"].apply(map_label)

# Î≥ÄÏàò Î∂ÑÎ¶¨
cat_features = [
    "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "TRAVEL_STATUS_ACCOMPANY",
    "RELATION_TYPE", "MVMN_NM", "GENDER", "AGE_GRP", "VISIT_AREA_TYPE_CD"
]
num_features = [
    "TRAVEL_STYL_1", "TRAVEL_STYL_3", "TRAVEL_STYL_5",
    "TRAVEL_STYL_6", "TRAVEL_STYL_7", "TRAVEL_STYL_8"
]

X = df[cat_features + num_features]
y = df["label_3cls"]

# train/test Î∂ÑÎ¶¨
X_train, X_test, y_train, y_test = train_test_split(
    X, y, stratify=y, test_size=0.3, random_state=42
)

# Ï†ÑÏ≤òÎ¶¨
preprocessor = ColumnTransformer([
    ("cat", OneHotEncoder(handle_unknown="ignore"), cat_features),
    ("num", "passthrough", num_features)
])

# Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ Íµ¨ÏÑ±: SMOTE + Ï†ÑÏ≤òÎ¶¨ + Î∂ÑÎ•òÍ∏∞
pipeline = ImbPipeline(steps=[
    ("preprocessor", preprocessor),
    ("smote", SMOTE(random_state=42)),
    ("classifier", RandomForestClassifier(
        class_weight={0: 3, 1: 1, 2: 1},
        random_state=42
    ))
])

# ÌïôÏäµ & ÏòàÏ∏°
pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

# Í≤∞Í≥º Ï∂úÎ†•
print("\nüìä Random Forest Classifier (SMOTE + class_weight)")
print(classification_report(y_test, y_pred))
print("‚úÖ Accuracy:", accuracy_score(y_test, y_pred))
print("üß© Confusion Matrix:\n", confusion_matrix(y_test, y_pred))