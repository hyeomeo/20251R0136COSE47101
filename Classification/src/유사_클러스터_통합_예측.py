# -*- coding: utf-8 -*-
"""유사 클러스터 통합 예측

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YSH7P-bzu6QBRHXyqa1HkrUFRf5dVEWB
"""

# 필요한 패키지 불러오기
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import classification_report, accuracy_score
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import Pipeline as ImbPipeline

# 데이터 로딩
df = pd.read_csv("preprocessed_with_cluster_numbering.csv", encoding="cp949")
df = df.drop(columns=["REGION"], errors="ignore")
df = df.dropna(subset=[
    "DGSTFN", "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "MVMN_NM",
    "REVISIT_INTENTION", "RCMDTN_INTENTION", "RELATION_TYPE",
    "VISIT_AREA_TYPE_CD", "CLUSTER"
])

# 타겟 변수: 3-class 분류
def map_label(score):
    if score == 5:
        return 2  # 만족
    elif score in [3, 4]:
        return 1  # 보통
    else:
        return 0  # 불만족
df["label_3cls"] = df["DGSTFN"].apply(map_label)

# 사용할 변수
cat_features = [
    "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "TRAVEL_STATUS_ACCOMPANY",
    "RELATION_TYPE", "MVMN_NM", "GENDER", "AGE_GRP", "VISIT_AREA_TYPE_CD"
]
num_features = [
    "TRAVEL_STYL_1", "TRAVEL_STYL_3", "TRAVEL_STYL_5",
    "TRAVEL_STYL_6", "TRAVEL_STYL_7", "TRAVEL_STYL_8"
]

# 클러스터 그룹 지정
target_clusters = [2, 3, 8, 11, 14, 16, 19, 23, 25, 28]
df_cluster_group = df[df["CLUSTER_NUM"].isin(target_clusters)]

# 변수 분리
X = df_cluster_group[cat_features + num_features]
y = df_cluster_group["label_3cls"]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, stratify=y, test_size=0.3, random_state=42
)

# 전처리
preprocessor = ColumnTransformer([
    ("cat", OneHotEncoder(handle_unknown="ignore"), cat_features),
    ("num", "passthrough", num_features)
])

# 파이프라인 구성
pipeline = ImbPipeline(steps=[
    ("preprocessor", preprocessor),
    ("smote", SMOTE(random_state=42)),
    ("classifier", RandomForestClassifier(
        class_weight={0: 3, 1: 1, 2: 1},
        random_state=42
    ))
])

# 학습 & 평가
pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

# 결과 출력
print("✅ Accuracy:", accuracy_score(y_test, y_pred))
print("📊 Classification Report:")
print(classification_report(y_test, y_pred, digits=4))