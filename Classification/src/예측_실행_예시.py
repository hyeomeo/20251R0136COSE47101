# -*- coding: utf-8 -*-
"""예측 실행 예시

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YSH7P-bzu6QBRHXyqa1HkrUFRf5dVEWB
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, IsolationForest
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline as ImbPipeline
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import Pipeline as ImbPipeline
import matplotlib.pyplot as plt
import seaborn as sns

# 데이터 로딩
df = pd.read_csv("preprocessed_with_cluster_ALL.csv")
df = df.drop(columns=["REGION"], errors="ignore")
df = df.dropna(subset=[
    "DGSTFN", "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "MVMN_NM",
    "REVISIT_INTENTION", "RCMDTN_INTENTION", "RELATION_TYPE",
    "VISIT_AREA_TYPE_CD"
])

# 클래스 정의
def map_label(score):
    if score == 5:
        return 2
    elif score in [3, 4]:
        return 1
    else:
        return 0
df["label_3cls"] = df["DGSTFN"].apply(map_label)

# 변수 분리
cat_features = [
    "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "TRAVEL_STATUS_ACCOMPANY",
    "RELATION_TYPE", "MVMN_NM", "GENDER", "AGE_GRP", "VISIT_AREA_TYPE_CD"
]
num_features = [
    "TRAVEL_STYL_1", "TRAVEL_STYL_3", "TRAVEL_STYL_5",
    "TRAVEL_STYL_6", "TRAVEL_STYL_7", "TRAVEL_STYL_8"
]

X = df[cat_features + num_features]
y = df["label_3cls"]

# train/test 분리
X_train, X_test, y_train, y_test = train_test_split(
    X, y, stratify=y, test_size=0.3, random_state=42
)

# 전처리
preprocessor = ColumnTransformer([
    ("cat", OneHotEncoder(handle_unknown="ignore"), cat_features),
    ("num", "passthrough", num_features)
])

# 전체 파이프라인 구성: SMOTE + 전처리 + 분류기
pipeline = ImbPipeline(steps=[
    ("preprocessor", preprocessor),
    ("smote", SMOTE(random_state=42)),
    ("classifier", RandomForestClassifier(
        class_weight={0: 3, 1: 1, 2: 1},
        random_state=42
    ))
])

# 학습 & 예측
pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

new_data = pd.DataFrame({
    "VISIT_AREA_NM": ["강릉 중앙시장"],
    "MAIN_TRAVEL_MONTH": [8],
    "TRAVEL_STATUS_ACCOMPANY": ["2인 여행(가족 외)"],
    "RELATION_TYPE": ["친구"],
    "MVMN_NM": ["대중교통 등"],
    "GENDER": [1],
    "AGE_GRP": [0.75],
    "VISIT_AREA_TYPE_CD": [1],
    "TRAVEL_STYL_1": [0.7],
    "TRAVEL_STYL_3": [0.4],
    "TRAVEL_STYL_5": [0.8],
    "TRAVEL_STYL_6": [0.2],
    "TRAVEL_STYL_7": [0.9],
    "TRAVEL_STYL_8": [0.6]
})

# 예측 (label)
pred_label = pipeline.predict(new_data)[0]

# 예측 (확률)
pred_proba = pipeline.predict_proba(new_data)[0]

# 클래스 이름 맵핑
label_map = {0: "Dissatisfied", 1: "Neutral", 2: "Satisfied"}

print("✅ 예측 결과:", label_map[pred_label])
print("📊 확률 분포:")
for i, prob in enumerate(pred_proba):
    print(f"  - {label_map[i]}: {float(prob):.2f}")