# -*- coding: utf-8 -*-
"""Update_logisticregression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x5srqP93C9hZ-coGvQSTb-faV3y7OMBo
"""



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import (
    accuracy_score, confusion_matrix, classification_report
)
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
df = pd.read_csv("preprocessed_with_cluster_ALL.csv")

# Drop REGION column
if "REGION" in df.columns:
    df = df.drop(columns=["REGION"])

# Drop rows with key missing values
df = df.dropna(subset=[
    "DGSTFN", "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "MVMN_NM",
    "REVISIT_INTENTION", "RCMDTN_INTENTION", "RELATION_TYPE",
    "VISIT_AREA_TYPE_CD"
])

# Create binary classification target
df["label"] = (df["DGSTFN"] > 4.0).astype(int)

# 범주형 변수
cat_features_clf = [
    "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "TRAVEL_STATUS_ACCOMPANY",
    "RELATION_TYPE", "MVMN_NM", "GENDER", "AGE_GRP", "VISIT_AREA_TYPE_CD"
]

# TRAVEL_STYLE 수치형 변수
num_features = [
    "TRAVEL_STYL_1", "TRAVEL_STYL_3", "TRAVEL_STYL_5",
    "TRAVEL_STYL_6", "TRAVEL_STYL_7", "TRAVEL_STYL_8"
]

# 전체 입력 변수
X_clf = df[cat_features_clf + num_features]
y_clf = df["label"]

# 전처리기 구성
clf_preprocessor = ColumnTransformer([
    ("cat", OneHotEncoder(handle_unknown="ignore"), cat_features_clf),
    ("num", "passthrough", num_features)
])

# 파이프라인 구성
clf_pipeline = Pipeline([
    ("preprocessor", clf_preprocessor),
    ("classifier", LogisticRegression(max_iter=1000, class_weight="balanced"))
])

# 학습/테스트 분할
Xc_train, Xc_test, yc_train, yc_test = train_test_split(
    X_clf, y_clf, test_size=0.3, random_state=42, stratify=y_clf
)

# 모델 학습 및 예측
clf_pipeline.fit(Xc_train, yc_train)
yc_pred = clf_pipeline.predict(Xc_test)

# 평가 결과 출력
print("\n📊 Logistic Regression Report(>4)")
print(pd.DataFrame(classification_report(yc_test, yc_pred, output_dict=True)).transpose())
print("✅ Accuracy:", accuracy_score(yc_test, yc_pred))
print("🧩 Confusion Matrix:\n", confusion_matrix(yc_test, yc_pred))