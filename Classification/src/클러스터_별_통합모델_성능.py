# -*- coding: utf-8 -*-
"""클러스터 별 통합모델 성능

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fcDByVpggBs3G7-hrdKZ3ElsLEWgZEik
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import classification_report, accuracy_score
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import Pipeline as ImbPipeline
import warnings

warnings.filterwarnings("ignore")

# 1. 데이터 로딩 및 전처리
df = pd.read_csv("preprocessed_with_cluster_ALL.csv")
df = df.drop(columns=["REGION"], errors="ignore")

df = df.dropna(subset=[
    "DGSTFN", "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "MVMN_NM",
    "REVISIT_INTENTION", "RCMDTN_INTENTION", "RELATION_TYPE",
    "VISIT_AREA_TYPE_CD"
])

# 라벨 정의: 0 = 불만족 (1~2점), 1 = 보통 (3~4점), 2 = 만족 (5점)
def map_label(score):
    if score == 5:
        return 2
    elif score in [3, 4]:
        return 1
    else:
        return 0

df["label_3cls"] = df["DGSTFN"].apply(map_label)

# 변수 설정
cat_features = [
    "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "TRAVEL_STATUS_ACCOMPANY",
    "RELATION_TYPE", "MVMN_NM", "GENDER", "AGE_GRP", "VISIT_AREA_TYPE_CD"
]
num_features = [
    "TRAVEL_STYL_1", "TRAVEL_STYL_3", "TRAVEL_STYL_5",
    "TRAVEL_STYL_6", "TRAVEL_STYL_7", "TRAVEL_STYL_8"
]

X = df[cat_features + num_features]
y = df["label_3cls"]

# 2. 통합 모델 학습
X_train, X_test, y_train, y_test = train_test_split(
    X, y, stratify=y, test_size=0.3, random_state=42
)

preprocessor = ColumnTransformer([
    ("cat", OneHotEncoder(handle_unknown="ignore"), cat_features),
    ("num", "passthrough", num_features)
])

pipeline = ImbPipeline(steps=[
    ("preprocessor", preprocessor),
    ("smote", SMOTE(random_state=42)),
    ("classifier", RandomForestClassifier(
        class_weight={0: 3, 1: 1, 2: 1},
        random_state=42
    ))
])

pipeline.fit(X_train, y_train)

# 3. 각 클러스터별로 통합 모델 예측 성능 평가
cluster_results = []

for (gender, age), group_df in df.groupby(["GENDER", "AGE_GRP"]):
    if len(group_df) < 500:
        continue  # 너무 적은 데이터는 제외

    X_cluster = group_df[cat_features + num_features]
    y_cluster = group_df["label_3cls"]

    y_pred = pipeline.predict(X_cluster)
    report = classification_report(y_cluster, y_pred, output_dict=True)
    acc = accuracy_score(y_cluster, y_pred)

    cluster_results.append({
        "GENDER": gender,
        "AGE_GRP": age,
        "Samples": len(group_df),
        "Accuracy": round(acc, 4),
        "F1_불만족": round(report["0"]["f1-score"], 4),
        "F1_보통": round(report["1"]["f1-score"], 4),
        "F1_만족": round(report["2"]["f1-score"], 4),
        "Macro_F1": round(report["macro avg"]["f1-score"], 4)
    })

# 4. 결과 정리
results_df = pd.DataFrame(cluster_results)
results_df = results_df.sort_values("Macro_F1", ascending=False)

print("\n📊 [클러스터별 통합 모델 성능]")
print(results_df)

# 저장도 가능
results_df.to_csv("통합모델_클러스터별_성능비교.csv", index=False)