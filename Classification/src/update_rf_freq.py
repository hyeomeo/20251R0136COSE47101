# -*- coding: utf-8 -*-
"""classification_RF_Freq

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GewNq8b6bBQjQPhySFWV8VGgSgNnCPgD
"""

# ÏòàÏ∏°Î™®Îç∏

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import (
    accuracy_score, confusion_matrix, classification_report,
    mean_absolute_error, mean_squared_error, r2_score
)
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
df = pd.read_csv("preprocessed_with_cluster_ALL.csv")

# Drop REGION column
if "REGION" in df.columns:
    df = df.drop(columns=["REGION"])

# Drop rows with key missing values
df = df.dropna(subset=[
    "DGSTFN", "VISIT_AREA_NM", "MAIN_TRAVEL_MONTH", "MVMN_NM",
    "REVISIT_INTENTION", "RCMDTN_INTENTION", "RELATION_TYPE",
    "VISIT_AREA_TYPE_CD"
])

# ---------------------- Random Forest Regression ---------------------- #
X_reg = df.drop(columns=[
    "DGSTFN", "TRAVELER_ID", "TRAVEL_ID", "REVISIT_INTENTION", "RCMDTN_INTENTION",
    "TRAVEL_START_YMD", "TRAVEL_END_YMD", "CLUSTER"
])
y_reg = df["DGSTFN"]

# Frequency Encoding for specific variables
freq_encode_cols = ["VISIT_AREA_NM", "VISIT_AREA_TYPE_CD"]
for col in freq_encode_cols:
    freq_map = X_reg[col].value_counts().to_dict()
    X_reg[col] = X_reg[col].map(freq_map)

# One-hot encode the rest
onehot_cols = [
    "MAIN_TRAVEL_MONTH", "TRAVEL_STATUS_ACCOMPANY",
    "RELATION_TYPE", "MVMN_NM", "GENDER", "AGE_GRP"
]

reg_preprocessor = ColumnTransformer([
    ("onehot", OneHotEncoder(handle_unknown="ignore"), onehot_cols)
], remainder="passthrough")

reg_pipeline = Pipeline([
    ("preprocessor", reg_preprocessor),
    ("regressor", RandomForestRegressor(random_state=42))
])

Xr_train, Xr_test, yr_train, yr_test = train_test_split(X_reg, y_reg, test_size=0.3, random_state=42)
reg_pipeline.fit(Xr_train, yr_train)
yr_pred_raw = reg_pipeline.predict(Xr_test)
yr_pred = np.clip(np.round(yr_pred_raw), 1, 5).astype(int)

print("\nüìä Random Forest Regressor (Full Model)")
print("‚úÖ MAE:", round(mean_absolute_error(yr_test, yr_pred), 4))
print("‚úÖ MSE:", round(mean_squared_error(yr_test, yr_pred), 4))
print("‚úÖ R¬≤:", round(r2_score(yr_test, yr_pred), 4))